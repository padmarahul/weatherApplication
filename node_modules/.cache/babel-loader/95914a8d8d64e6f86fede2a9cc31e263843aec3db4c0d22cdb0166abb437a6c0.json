{"ast":null,"code":"//const GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\n\nconst WEATHER_API_URL = 'http://api.weatherapi.com/v1';\nconst WEATHER_API_KEY = '8769982d2a374fc88c5152633232808';\n\n// const GEO_API_OPTIONS = {\n//   method: 'GET',\n//   headers: {\n//     'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n//     'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com',\n//   },\n// };\n\nexport async function fetchWeatherData(input, days) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([fetch(`${WEATHER_API_URL}/current.json?key=${WEATHER_API_KEY}&q=${input}&aqi=no`), fetch(`${WEATHER_API_URL}/forecast.json?key=${WEATHER_API_KEY}&q=${input}&days=${days}&aqi=no&alerts=no`)]);\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function fetchCities(input) {\n  try {\n    const response = await fetch(`${WEATHER_API_URL}/search.json?key=${WEATHER_API_KEY}&q=${input}`);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}","map":{"version":3,"names":["WEATHER_API_URL","WEATHER_API_KEY","fetchWeatherData","input","days","weatherPromise","forcastPromise","Promise","all","fetch","weatherResponse","json","forcastResponse","error","console","log","fetchCities","response","data"],"sources":["/Users/paruchurisatyendra/Desktop/tmfrontend/weatherApplication/src/services/WeatherServices.js"],"sourcesContent":["//const GEO_API_URL = 'https://wft-geo-db.p.rapidapi.com/v1/geo';\n\nconst WEATHER_API_URL = 'http://api.weatherapi.com/v1';\nconst WEATHER_API_KEY = '8769982d2a374fc88c5152633232808';\n\n// const GEO_API_OPTIONS = {\n//   method: 'GET',\n//   headers: {\n//     'X-RapidAPI-Key': '4f0dcce84bmshac9e329bd55fd14p17ec6fjsnff18c2e61917',\n//     'X-RapidAPI-Host': 'wft-geo-db.p.rapidapi.com',\n//   },\n// };\n\nexport async function fetchWeatherData(input,days,) {\n  try {\n    let [weatherPromise, forcastPromise] = await Promise.all([\n      fetch(\n        `${WEATHER_API_URL}/current.json?key=${WEATHER_API_KEY}&q=${input}&aqi=no`\n      ),\n      fetch(\n        `${WEATHER_API_URL}/forecast.json?key=${WEATHER_API_KEY}&q=${input}&days=${days}&aqi=no&alerts=no`\n      ),\n    ]);\n\n    const weatherResponse = await weatherPromise.json();\n    const forcastResponse = await forcastPromise.json();\n    return [weatherResponse, forcastResponse];\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function fetchCities(input) {\n  try {\n    const response = await fetch(\n      `${WEATHER_API_URL}/search.json?key=${WEATHER_API_KEY}&q=${input}`\n    );\n\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAG,8BAA8B;AACtD,MAAMC,eAAe,GAAG,iCAAiC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,eAAeC,gBAAgBA,CAACC,KAAK,EAACC,IAAI,EAAG;EAClD,IAAI;IACF,IAAI,CAACC,cAAc,EAAEC,cAAc,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDC,KAAK,CACF,GAAET,eAAgB,qBAAoBC,eAAgB,MAAKE,KAAM,SACpE,CAAC,EACDM,KAAK,CACF,GAAET,eAAgB,sBAAqBC,eAAgB,MAAKE,KAAM,SAAQC,IAAK,mBAClF,CAAC,CACF,CAAC;IAEF,MAAMM,eAAe,GAAG,MAAML,cAAc,CAACM,IAAI,CAAC,CAAC;IACnD,MAAMC,eAAe,GAAG,MAAMN,cAAc,CAACK,IAAI,CAAC,CAAC;IACnD,OAAO,CAACD,eAAe,EAAEE,eAAe,CAAC;EAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EACpB;AACF;AAEA,OAAO,eAAeG,WAAWA,CAACb,KAAK,EAAE;EACvC,IAAI;IACF,MAAMc,QAAQ,GAAG,MAAMR,KAAK,CACzB,GAAET,eAAgB,oBAAmBC,eAAgB,MAAKE,KAAM,EACnE,CAAC;IAED,MAAMe,IAAI,GAAG,MAAMD,QAAQ,CAACN,IAAI,CAAC,CAAC;IAClC,OAAOO,IAAI;EACb,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}